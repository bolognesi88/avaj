package Parser;

import java.util.*;
import java_cup.runtime.*;


/* Terminals (tokens returned by the scanner) */
/* declarations */		
terminal	PACKAGE	;
terminal	IMPORT	;
terminal	CLASS	;
terminal	ENUM	;
terminal	INTERFACE	;
terminal	EXTENDS	;
terminal	IMPLEMENTS	;
		
		
/* types */		
terminal	BYTE	;
terminal	SHORT	;
terminal	CHAR	;
terminal	INT	;
terminal	LONG	;
terminal	FLOAT	;
terminal	DOUBLE	;
terminal	BOOLEAN	;
		
		
terminal	VOID	;
terminal	THIS	;
terminal	SUPER	;
terminal	NEW	;
terminal	TRUE	;
terminal	FALSE	;
terminal	NULL	;
		
		
/* control flow */		
terminal	IF	;
terminal	ELSE	;
terminal	FOR	;
terminal	WHILE	;
terminal	RETURN	;
terminal	DO	;
terminal	ASSERT	;
terminal	SWITCH	;
terminal	CASE	;
terminal	DEFAULT	;
terminal	BREAK	;
terminal	CONTINUE	;
terminal	TRY	;
terminal	CATCH	;
terminal	FINALLY	;
terminal	THROW	;
terminal	THROWS	;
		
		
/* modifiers */		
terminal	PUBLIC	;
terminal	PROTECTED	;
terminal	PRIVATE	;
terminal	STATIC	;
terminal	ABSTRACT	;
terminal	FINAL	;
terminal	NATIVE	;
terminal	SYNCHRONIZED	;
terminal	TRANSIENT	;
terminal	VOLATILE	;
terminal	STRICTFP	;
		
		
/* literals */		
terminal	INTEGER_LITERAL	;
		
/* operators */		
terminal	GE	;
terminal	LE	;
terminal	EQUALS	;
terminal	NOT_EQUALS	;
terminal	DOUBLE_OR	;
terminal	DOUBLE_AND	;
terminal	SHIFT_LEFT	;
terminal	SHIFT_RIGHT	;
terminal	SHIFT_RIGHT_ARITHM	;
terminal	INC	;
terminal	DEC	;
		
		
terminal	PLUS	;
terminal	MINUS	;
terminal	TIMES	;
terminal	DIVIDE	;
terminal	NOT	;
terminal	AND	;
terminal	OR	;
terminal	XOR	;
terminal	MOD	;
terminal	BITWISE_NOT	;
		
/* FUTURE USE, FUTURE NAME */		
terminal	CHAIN	;
		
/* assignments */		
terminal	PLUS_EQUALS	;
terminal	MINUS_EQUALS	;
terminal	TIMES_EQUALS	;
terminal	DIV_EQUALS	;
terminal	AND_EQUALS	;
terminal	OR_EQUALS	;
terminal	XOR_EQUALS	;
terminal	MOD_EQUALS	;
terminal	SHIFT_LEFT_EQUALS	;
terminal	SHIFT_RIGHT_EQUALS	;
terminal	SHIFT_RIGHT_ARITHM_EQUALS	;
terminal	BECOMES	;
		
    		
/* delimiters */		
terminal	LPAREN	;
terminal	RPAREN	;
terminal	LBRACKET	;
terminal	RBRACKET	;
terminal	LBRACE	;
terminal	RBRACE	;
terminal	LT	;
terminal	GT	;
terminal	QUOTE	;
terminal	DOUBLE_QUOTE	;
		
		
/* punctuation */		
terminal	DOT	;
terminal	COMMA	;
terminal	SEMICOLON	;
terminal	QUESTION	;
terminal    AT ; 

/* identifiers */		
terminal	IDENTIFIER	;


/* Nonterminals */
nonterminal CompilationUnit;
nonterminal Annotations;
nonterminal QualifiedIdentifier;
nonterminal ImportDeclaration;
nonterminal ImportDeclarations;
nonterminal TypeDeclaration;
nonterminal TypeDeclarations;
nonterminal PackageDeclaration;
nonterminal Annotation;
nonterminal Identifier;
nonterminal AnnotationElement;
nonterminal ClassDeclaration;
nonterminal InterfaceDeclaration;
nonterminal ClassOrInterfaceDeclaration;
nonterminal Modifiers;
nonterminal Modifier;
nonterminal ElementValuePairs;
nonterminal ElementValuePair;
nonterminal ElementValues;
nonterminal ElementValue;
nonterminal ElementValueArrayInitializer;
nonterminal Expression1;
nonterminal NormalClassDeclaration;
nonterminal EnumDeclaration;
nonterminal NormalInterfaceDeclaration;
nonterminal AnnotationTypeDeclaration;
nonterminal Type;
nonterminal BasicType; 
nonterminal ReferenceType;
nonterminal TypeArguments; 
nonterminal TypeArgument;  
nonterminal TypeArgumentList;
nonterminal NonWildcardTypeArguments;
nonterminal TypeList;  
nonterminal TypeArgumentsOrDiamond;
nonterminal NonWildcardTypeArgumentsOrDiamond;
nonterminal TypeParameters;
nonterminal TypeParameter;
nonterminal Bound;  
nonterminal EmptyArrays;
nonterminal EmptyArray;
nonterminal ClassBody;
nonterminal InterfaceBody;
nonterminal AnnotationTypeBody;
nonterminal EnumBody;

/* Precedence declarations */
precedence nonassoc BECOMES;
precedence nonassoc AND, OR;
precedence left LT, GT, LE, GE;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence right NOT, NEW;
precedence left DOT;
precedence nonassoc EQUALS;
precedence nonassoc AT;
precedence nonassoc PACKAGE;

/* Productions */

CompilationUnit::= PackageDeclaration ImportDeclarations TypeDeclarations
				|
				PackageDeclaration TypeDeclarations
				|
				ImportDeclarations TypeDeclarations
				|
				TypeDeclarations
				;

PackageDeclaration::= Annotations PACKAGE QualifiedIdentifier SEMICOLON
				|
				PACKAGE QualifiedIdentifier SEMICOLON
				;

QualifiedIdentifier::= Identifier 
 				|
				QualifiedIdentifier DOT Identifier
				;

Annotations::= Annotation 
				|
				Annotations Annotation
				;   

Annotation::= AT QualifiedIdentifier LPAREN AnnotationElement RPAREN
				|
				AT QualifiedIdentifier LPAREN RPAREN
				|
				AT QualifiedIdentifier				
				;

AnnotationElement::=
		    ElementValuePairs
		    |
		    ElementValue
		    ;

ElementValuePairs::= ElementValuePair 
			|
			ElementValuePairs COMMA ElementValuePair
			;

ElementValuePair::= Identifier BECOMES ElementValue
			;
    
ElementValue::=  Annotation
			|
		    Expression1 
		    |
		    ElementValueArrayInitializer
		    ;


ElementValueArrayInitializer::= LBRACE ElementValues COMMA RBRACE
			|
			LBRACE ElementValues RBRACE
			|
			LBRACE COMMA RBRACE
			|
			LBRACE RBRACE
			;


ElementValues ::= ElementValue 
			|
			ElementValues COMMA	ElementValue
			;
				
ImportDeclarations ::= ImportDeclaration
				|
				ImportDeclarations ImportDeclaration
				;					
					
ImportDeclaration::= IMPORT STATIC QualifiedIdentifier DOT TIMES SEMICOLON
				|
				IMPORT STATIC QualifiedIdentifier SEMICOLON
				|
				IMPORT QualifiedIdentifier DOT TIMES SEMICOLON
				|
				IMPORT QualifiedIdentifier SEMICOLON
				;

TypeDeclarations::= TypeDeclaration
				|
				TypeDeclarations TypeDeclaration
				;

TypeDeclaration::= Modifiers ClassOrInterfaceDeclaration
				|
				ClassOrInterfaceDeclaration
				;

ClassOrInterfaceDeclaration::=  
				ClassDeclaration 
				| 
				InterfaceDeclaration
				;

Modifiers::= Modifier Modifiers
			|
			Modifier;

Modifier::=
    Annotations
    | PUBLIC
    | PROTECTED
    | PRIVATE
    | STATIC 
    | ABSTRACT
    | FINAL
    | NATIVE
    | SYNCHRONIZED
    | TRANSIENT
    | VOLATILE
    | STRICTFP
    ;


ClassDeclaration::= NormalClassDeclaration
				|
			    EnumDeclaration
			    ;


InterfaceDeclaration::= NormalInterfaceDeclaration
				|
			    AnnotationTypeDeclaration
			    ;
			    
			    
NormalClassDeclaration::= CLASS Identifier TypeParameters EXTENDS Type IMPLEMENTS TypeList ClassBody
				|
				CLASS Identifier EXTENDS Type IMPLEMENTS TypeList ClassBody
				|
				CLASS Identifier TypeParameters IMPLEMENTS TypeList ClassBody
				|
				CLASS Identifier TypeParameters EXTENDS Type ClassBody
				|
				CLASS Identifier IMPLEMENTS TypeList ClassBody
				|
				CLASS Identifier EXTENDS Type ClassBody
				|
				CLASS Identifier TypeParameters ClassBody
				|
				CLASS Identifier ClassBody
				;

EnumDeclaration::= ENUM Identifier IMPLEMENTS TypeList EnumBody
				|
				ENUM Identifier EnumBody
				;

NormalInterfaceDeclaration::=  INTERFACE Identifier TypeParameters EXTENDS TypeList InterfaceBody
				|
				INTERFACE Identifier EXTENDS TypeList InterfaceBody
				|
				INTERFACE Identifier TypeParameters InterfaceBody
				|
				INTERFACE Identifier InterfaceBody
				;

AnnotationTypeDeclaration::= AT INTERFACE Identifier AnnotationTypeBody ;
				
EmptyArrays::= EmptyArray
			|
			EmptyArrays EmptyArray
			;				

EmptyArray::= LBRACKET RBRACKET;
				
Type::=
    BasicType EmptyArrays
    |
    ReferenceType EmptyArrays
    |
    BasicType 
    |
    ReferenceType 
    ;

BasicType::= 
    BYTE
    |
    SHORT
    |
    CHAR
    |
    INT
    |
    LONG
    |
    FLOAT
    |
    DOUBLE
    |
    BOOLEAN
    ;

ReferenceType::=  Identifier TypeArguments DOT ReferenceType
			|
			Identifier DOT ReferenceType
			|
			Identifier TypeArguments 
			|
			Identifier
			;

TypeArguments::= LT TypeArgumentList GT
			;

TypeArgumentList::= TypeArgument
			|
			TypeArgumentList COMMA TypeArgument 
			;
    

TypeArgument::=  QUESTION EXTENDS ReferenceType
			|
			ReferenceType
			;


NonWildcardTypeArguments::= GT TypeList LT;

TypeList::=  ReferenceType
			|
			COMMA TypeList
			;

TypeArgumentsOrDiamond::=
    LT GT 
    |
    TypeArguments
    ;

NonWildcardTypeArgumentsOrDiamond::=
    LT GT
    |
    NonWildcardTypeArguments
    ;


TypeParameters::=
    	LT TypeParameter GT
    	|
    	LT TypeParameter COMMA TypeParameters GT
    	;

TypeParameter::=
    Identifier EXTENDS Bound
    |
    Identifier
    ;

Bound::=  
    ReferenceType
    | 
	AND Bound
	;


ClassBody::= LBRACE RBRACE;

InterfaceBody::= LBRACE RBRACE;

AnnotationTypeBody::= LBRACE RBRACE;

EnumBody::= LBRACE RBRACE;





Expression1::= Identifier
	|
	DOUBLE_QUOTE Identifier DOUBLE_QUOTE;		



Identifier::= IDENTIFIER;
