public class MyClass {

	private Class<? extends ItemDoFormulario> classe;

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumns( {
		   @JoinColumn(name = "r034fun_numemp", referencedColumnName = "numemp"),
		   @JoinColumn(name = "r034fun_tipcol", referencedColumnName = "tipcol"),
		   @JoinColumn(name = "r034fun_numcad", referencedColumnName = "numcad") 
		})
	private R034funBase r034fun;

	private void meuMetodo(){
		double d;
		float x,y;
		int i=3, j=4;
		char a = 'a';
		final char a = 'a';		
		@java.lang.Immutable double d = 0.0d;
		int[][] j;
		@XmlIgnore List<String> lista;
		;
		i = 0;
		retorno[i] = 0;
		retorno[i++] = retorno[++i];
		final String ip = ((HttpServletRequest) (FacesContext.getCurrentInstance(retorno).getExternalContext(a, b))).getRequest();
		return new String[0];
		this.x();
		x();
		super(1);
		super(i);
		List<AvajExample2> retorno = new ArrayList<AvajExample2>();
		this.texto = "a";
		this.getY().texto = "b";
		z.texto = "c"+this.texto.length();
		
		switch (fun.getCodest()) {
		case 10:
		case 21:
		case 22:
		case 25:
		case 35:
			return "MS";
		case 2:
		case 3:
			return "MA";
		case 17:
			return "DEER";
		default:
			return "Proc";
		}		
				
	}
	
	private static Map<Integer, ItemDoFormulario> mapaItens = new HashMap<Integer, ItemDoFormulario>();
	
	public int compareTo(ItemDoFormulario arg0) {
		if (arg0.getOrdem() < this.getOrdem()) {
			return -1;
		} else {
			if (this.getOrdem() > arg0.getOrdem()) {
				return 1;
			}
		}
		return 0;
	}
}
